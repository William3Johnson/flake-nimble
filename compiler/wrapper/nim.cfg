# Configuration file for the Nim Compiler.

os = @targetOs@
cpu = @targetCpu@
cc = @ccKind@

clang.exe = "@clangExe@"
clang.cpp.exe = "@clangExe@++"
clang.linkerexe = "@clangLinkerExe@"
clang.cpp.linkerexe = "@clangLinkerExe@"

# additional options always passed to the compiler:
--parallel_build: "0" # 0 to auto-detect number of processors

hint[LineTooLong]=off

lib="@nimStdLib@"
path="$lib/deprecated/core"
path="$lib/deprecated/pure"
path="$lib/pure/collections"
path="$lib/pure/concurrency"
path="$lib/impure"
path="$lib/wrappers"
path="$lib/wrappers/linenoise"
path="$lib/windows"
path="$lib/posix"
path="$lib/js"
path="$lib/pure/unidecode"
path="$lib/arch"
path="$lib/core"
path="$lib/pure"

@if danger or quick:
  obj_checks:off
  field_checks:off
  range_checks:off
  bound_checks:off
  overflow_checks:off
  assertions:off
  stacktrace:off
  linetrace:off
  debugger:off
  line_dir:off
  dead_code_elim:on
  @if nimHasNilChecks:
    nilchecks:off
  @end
@end

@if release or danger:
  stacktrace:off
  excessiveStackTrace:off
  linetrace:off
  debugger:off
  line_dir:off
  opt:speed
@end

@if unix:
  @if not bsd or haiku:
    # -fopenmp
    gcc.options.linker = "-ldl"
    gcc.cpp.options.linker = "-ldl"
    clang.options.linker = "-ldl"
    clang.cpp.options.linker = "-ldl"
    tcc.options.linker = "-ldl"
  @end
  @if bsd:
    # BSD got posix_spawn only recently, so we deactivate it for osproc:
    define:useFork
    # at least NetBSD has problems with thread local storage:
    tlsEmulation:on
  @end
  @if haiku:
    gcc.options.linker = "-Wl,--as-needed -lnetwork"
    gcc.cpp.options.linker = "-Wl,--as-needed -lnetwork"
    clang.options.linker = "-Wl,--as-needed -lnetwork"
    clang.cpp.options.linker = "-Wl,--as-needed -lnetwork"
    tcc.options.linker = "-Wl,--as-needed -lnetwork"
  @end
@end

@if android:
  cc = clang
  @if termux:
    gcc.options.linker = "-landroid-glob"
    gcc.cpp.options.linker = "-landroid-glob"
    clang.options.linker = "-landroid-glob"
    clang.cpp.options.linker = "-landroid-glob"
    tcc.options.linker = "-landroid-glob"
  @end
@end

@if macosx or freebsd:
  tlsEmulation:on
  gcc.options.always = "-w"
  gcc.cpp.options.always = "-w -fpermissive"
@elif windows:
  gcc.options.always = "-w -mno-ms-bitfields"
  gcc.cpp.options.always = "-w -fpermissive -mno-ms-bitfields"
@else:
  gcc.options.always = "-w"
  gcc.cpp.options.always = "-w -fpermissive"
@end

# Configuration for Objective-C compiler:
#
# Options for GNUStep. GNUStep configuration varies wildly, so you'll probably
# have to add additional compiler and linker flags on a per-project basis.
gcc.objc.options.linker = "-lobjc -lgnustep-base"
llvm_gcc.objc.options.linker = "-lobjc -lgnustep-base"
clang.objc.options.linker = "-lobjc -lgnustep-base"

# Options for Mac OS X. Mac OS X uses its own Objective-C stack that is
# totally different from GNUStep.
@if macosx:
  gcc.objc.options.linker = "-framework Foundation"
  llvm_gcc.objc.options.linker = "-framework Foundation"
  clang.objc.options.linker = "-framework Foundation"
@end

gcc.options.speed = "-O3 -fno-strict-aliasing"
gcc.options.size = "-Os"
@if windows:
  gcc.options.debug = "-g3 -Og -gdwarf-3"
@else:
  gcc.options.debug = "-g3 -Og"
@end
gcc.cpp.options.speed = "-O3 -fno-strict-aliasing"
gcc.cpp.options.size = "-Os"
gcc.cpp.options.debug = "-g3 -Og"

# Configuration for the LLVM GCC compiler:
llvm_gcc.options.debug = "-g"
llvm_gcc.options.always = "-w"
llvm_gcc.options.speed = "-O2"
llvm_gcc.options.size = "-Os"

# Configuration for the LLVM CLang compiler:
clang.options.debug = "-g"
clang.cpp.options.debug = "-g"
clang.options.always = "-w"
clang.options.speed = "-O3"
clang.options.size = "-Os"

@if genode:
  clang.cpp.options.always = "-std=gnu++17 -fpermissive"
  d:noSignalHandler
  d:posix
  noCppExceptions # avoid std C++
  passC:"@passC@"
  passL:"@passL@"
  tlsEmulation:on # no TLS segment register magic
@end
